#!/usr/bin/env bash
# ARG_OPTIONAL_SINGLE([project-name],[P],[Set the project name.],[waterdrop])
# ARG_OPTIONAL_SINGLE([drupal],[D],[Set the major Drupal version.],[^10])
# ARG_OPTIONAL_REPEATED([extra-project],[e],[An extra project to include in composer.json. Repeat for multiple values. Like drupal/devel.],['drupal/admin_toolbar' 'drupal/module_filter' 'drupal/pathauto' 'drupal/pathologic:^2.0@alpha' 'drupal/purge' 'drupal/search_api' 'drupal/search_api_page' 'drupal/symfony_mailer' 'drupal/twig_tweak' 'drupal/varnish_purge' 'drupal/views_bulk_operations'])
# ARG_OPTIONAL_BOOLEAN([reset-extra-projects],[r],[Do not use the default list of additional composer projects.],[off])
# ARG_OPTIONAL_BOOLEAN([skip-asset-packagist],[],[Do not add asset packagist to composer.json],[off])
# ARG_OPTIONAL_BOOLEAN([docker-volumes],[],[Initialize the Docker volumes.],[on])
# ARG_OPTIONAL_SINGLE([docker-network],[n],[Set the name of the Docker network.],[watnet])
# ARG_OPTIONAL_BOOLEAN([docker-secrets],[],[Initialize the Docker secret files.],[on])
# ARG_OPTIONAL_SINGLE([host-port],[],[Set the host port for Docker to bind the app container to.],[1234])
# ARG_OPTIONAL_SINGLE([db-host-port],[],[Set the host port for Docker to bind the db container to.],[1235])
# ARG_OPTIONAL_BOOLEAN([env-file],[],[Initialize the .env file.],[on])
# ARG_HELP([Initializes Drupal based on drupal/recommended-project and a few other nice to have modules, sets up Docker volumes/network/secrets, adjust the names of things to what you want to call the project, and adds a .env file to help make building simpler.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='PDernh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_project_name="waterdrop"
_arg_drupal="^10"
_arg_extra_project=('drush/drush' 'drupal/admin_toolbar' 'drupal/module_filter' 'drupal/pathauto' 'drupal/pathologic:^2.0@alpha' 'drupal/purge' 'drupal/search_api' 'drupal/search_api_page' 'drupal/symfony_mailer' 'drupal/twig_tweak' 'drupal/varnish_purge' 'drupal/views_bulk_operations')
_arg_reset_extra_projects="off"
_arg_skip_asset_packagist="off"
_arg_docker_volumes="on"
_arg_docker_network="watnet"
_arg_docker_secrets="on"
_arg_host_port="1234"
_arg_db_host_port="1235"
_arg_env_file="on"


print_help()
{
	printf '%s\n' "Initializes Drupal based on drupal/recommended-project and a few other nice to have modules, sets up Docker volumes/network/secrets, adjust the names of things to what you want to call the project, and adds a .env file to help make building simpler."
	printf 'Usage: %s [-P|--project-name <arg>] [-D|--drupal <arg>] [-e|--extra-project <arg>] [-r|--(no-)reset-extra-projects] [--(no-)skip-asset-packagist] [--(no-)docker-volumes] [-n|--docker-network <arg>] [--(no-)docker-secrets] [--host-port <arg>] [--db-host-port <arg>] [--(no-)env-file] [-h|--help]\n' "$0"
	printf '\t%s\n' "-P, --project-name: Set the project name. (default: 'waterdrop')"
	printf '\t%s\n' "-D, --drupal: Set the major Drupal version. (default: '^10')"
	printf '\t%s' "-e, --extra-project: An extra project to include in composer.json. Repeat for multiple values. Like drupal/devel. (default array elements:"
	printf " '%s'" 'drush/drush' 'drupal/admin_toolbar' 'drupal/module_filter' 'drupal/pathauto' 'drupal/pathologic:^2.0@alpha' 'drupal/purge' 'drupal/search_api' 'drupal/search_api_page' 'drupal/symfony_mailer' 'drupal/twig_tweak' 'drupal/varnish_purge' 'drupal/views_bulk_operations'
	printf ')\n'
	printf '\t%s\n' "-r, --reset-extra-projects, --no-reset-extra-projects: Do not use the default list of additional composer projects. (off by default)"
	printf '\t%s\n' "--skip-asset-packagist, --no-skip-asset-packagist: Do not add asset packagist to composer.json (off by default)"
	printf '\t%s\n' "--docker-volumes, --no-docker-volumes: Initialize the Docker volumes. (on by default)"
	printf '\t%s\n' "-n, --docker-network: Set the name of the Docker network. (default: 'watnet')"
	printf '\t%s\n' "--docker-secrets, --no-docker-secrets: Initialize the Docker secret files. (on by default)"
	printf '\t%s\n' "--host-port: Set the host port for Docker to bind the app container to. (default: '1234')"
	printf '\t%s\n' "--db-host-port: Set the host port for Docker to bind the db container to. (default: '1235')"
	printf '\t%s\n' "--env-file, --no-env-file: Initialize the .env file. (on by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-P|--project-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_project_name="$2"
				shift
				;;
			--project-name=*)
				_arg_project_name="${_key##--project-name=}"
				;;
			-P*)
				_arg_project_name="${_key##-P}"
				;;
			-D|--drupal)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_drupal="$2"
				shift
				;;
			--drupal=*)
				_arg_drupal="${_key##--drupal=}"
				;;
			-D*)
				_arg_drupal="${_key##-D}"
				;;
			-e|--extra-project)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_extra_project+=("$2")
				shift
				;;
			--extra-project=*)
				_arg_extra_project+=("${_key##--extra-project=}")
				;;
			-e*)
				_arg_extra_project+=("${_key##-e}")
				;;
			-r|--no-reset-extra-projects|--reset-extra-projects)
				_arg_reset_extra_projects="on"
				test "${1:0:5}" = "--no-" && _arg_reset_extra_projects="off"
				;;
			-r*)
				_arg_reset_extra_projects="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--no-skip-asset-packagist|--skip-asset-packagist)
				_arg_skip_asset_packagist="on"
				test "${1:0:5}" = "--no-" && _arg_skip_asset_packagist="off"
				;;
			--no-docker-volumes|--docker-volumes)
				_arg_docker_volumes="on"
				test "${1:0:5}" = "--no-" && _arg_docker_volumes="off"
				;;
			-n|--docker-network)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_docker_network="$2"
				shift
				;;
			--docker-network=*)
				_arg_docker_network="${_key##--docker-network=}"
				;;
			-n*)
				_arg_docker_network="${_key##-n}"
				;;
			--no-docker-secrets|--docker-secrets)
				_arg_docker_secrets="on"
				test "${1:0:5}" = "--no-" && _arg_docker_secrets="off"
				;;
			--host-port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_host_port="$2"
				shift
				;;
			--host-port=*)
				_arg_host_port="${_key##--host-port=}"
				;;
			--db-host-port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_db_host_port="$2"
				shift
				;;
			--db-host-port=*)
				_arg_db_host_port="${_key##--db-host-port=}"
				;;
			--no-env-file|--env-file)
				_arg_env_file="on"
				test "${1:0:5}" = "--no-" && _arg_env_file="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

docker pull composer;
JQ=$(which jq);
if [[ "$JQ" == '' ]]; then
  echo "Failed to find jq in your path. Please fix that.";
  exit 0;
fi
USE_EXTRA_PROJECTS=();
if [[ $_arg_reset_extra_projects == "on" ]]; then
  echo "Resetting extra projects.";
  DEFAULT_EXTRAS=('drush/drush' 'drupal/admin_toolbar' 'drupal/module_filter' 'drupal/pathauto' 'drupal/pathologic' 'drupal/purge' 'drupal/purge_purger_http' 'drupal/search_api' 'drupal/search_api_page' 'drupal/symfony_mailer' 'drupal/twig_tweak' 'drupal/varnish_purge' 'drupal/views_bulk_operations');
  NEW_EXTRAS=();
  for i in ${_arg_extra_project[@]}  ; do
      KEEP=1;
      for e in ${DEFAULT_EXTRAS[@]} ; do
          if [[ "$e" == "$i" ]]; then
            echo "DO NOT KEEP $i";
            KEEP=0;
          fi
      done
      if [[ $KEEP == 1 ]]; then
        echo "ADD $i to NEW_EXTRAS";
        NEW_EXTRAS+=( "$i" );
      fi
  done
  USE_EXTRA_PROJECTS+=$NEW_EXTRAS;
fi

USE_DRUPAL_VERSION=$_arg_drupal;
echo "Using Drupal version $USE_DRUPAL_VERSION";

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd );
ROOT_DIR=$SCRIPT_DIR/../;

# We want to be in the project root.
cd $ROOT_DIR;

# Set up cache dirs for composer and npm.
## npm is not used by default, but it is useful to have when theming or writing javascript for custom modules.
mkdir -p "${ROOT_DIR}tmp/composer_cache";
mkdir -p "${ROOT_DIR}tmp/npm_cache";
chmod -R 777 "${ROOT_DIR}tmp/composer_cache";
chmod -R 777 "${ROOT_DIR}tmp/npm_cache";

## Run composer.
echo "Running composer create-project.";
docker run --rm --user $(id -u):$(id -g) --volume ${ROOT_DIR}tmp/composer_cache:/tmp --volume ${ROOT_DIR}app:/app \
  composer create-project --ignore-platform-reqs --no-interaction --no-ansi \
   drupal/recommended-project:$USE_DRUPAL_VERSION src

# If we are not skipping it, add asset packagist configuration to composer.json.
if [[ $_arg_skip_asset_packagist == "off" ]]; then
echo "Adding asset packagist.";
# move into the new src directory so we can update composer.json.
cd "${ROOT_DIR}app/src";

# Use jq to add the new config.
cat composer.json | jq '. *= {
                                 "repositories":
                                 [{
                                     "type": "composer",
                                     "url": "https://packages.drupal.org/8"
                                 },
                                 {
                                     "type": "composer",
                                     "url": "https://asset-packagist.org"
                                 }],
                                 "extra":
                                 {
                                     "installer-types":
                                     [
                                         "npm-asset",
                                         "bower-asset"
                                     ],
                                     "installer-paths":
                                     {
                                         "web/libraries/{$name}":
                                         [
                                             "type:drupal-library",
                                             "type:npm-asset",
                                             "type:bower-asset"
                                         ]
                                     }
                                 }
                             }' | tee composer.json
else
  echo "Skipping adding asset packagist.";
fi

# Double check we are in the root of the project. Yes, I am paranoid.
cd $ROOT_DIR;

# Add extra projects, if we reset, the array is empty, or only contains projects
# from the command line.
if [[ $_arg_reset_extra_projects == "on" ]]; then
  for EXTRA in ${USE_EXTRA_PROJECTS[@]}; do
    docker run --rm --user $(id -u):$(id -g) --volume ${ROOT_DIR}tmp/composer_cache:/tmp --volume ${ROOT_DIR}app/src:/app \
      composer require --ignore-platform-reqs --no-interaction --no-ansi $EXTRA;
  done
else
  for EXTRA in ${_arg_extra_project[@]}; do
    docker run --rm --user $(id -u):$(id -g) --volume ${ROOT_DIR}tmp/composer_cache:/tmp --volume ${ROOT_DIR}app/src:/app \
      composer require --ignore-platform-reqs --no-interaction --no-ansi $EXTRA;
  done
fi

# Make sure we are in the root of the project.
cd $ROOT_DIR;

# To make resetting easier, we use -dist on the files we'll be replacing values in.
cp dev.run.yml-dist dev.run.yml
cp app/docker-config/drupal/settings.php-dist app/docker-config/drupal/settings.php;

# Update dev.run.yml and settings.php with the correct project name, Docker network, and port.
sed -i "s/PROJECTNAME/${_arg_project_name}/g" dev.run.yml;
sed -i "s/PROJECTNAME/${_arg_project_name}/g" app/docker-config/drupal/settings.php;
sed -i "s/DOCKERNET/${_arg_docker_network}/g" dev.run.yml;
sed -i "s/HOSTPORT/${_arg_host_port}/g" dev.run.yml;
sed -i "s/DBPORT/${_arg_db_host_port}/g" dev.run.yml;

# Add the needed volumes.
if [[ $_arg_docker_volumes == "on" ]]; then
  docker volume create "${_arg_project_name}_db_data";
  docker volume create "${_arg_project_name}_app_data_public";
  docker volume create "${_arg_project_name}_app_data_private";
  docker volume create "${_arg_project_name}_share";
fi

# Add the needed network.
docker network create $_arg_docker_network;

# Create empty files for each of the secrets.
if [[ $_arg_docker_secrets == "on" ]]; then
  echo "${_arg_project_name}-db" > "secrets/${_arg_project_name}_db_host";
  echo "${_arg_project_name}" > "secrets/${_arg_project_name}_db_name";
  echo "password" > "secrets/${_arg_project_name}_db_pass";
  echo "3306" > "secrets/${_arg_project_name}_db_port";
  echo "${_arg_project_name}" > "secrets/${_arg_project_name}_db_user";
  echo "password" > "secrets/${_arg_project_name}_db_root_pass";
  touch "secrets/${_arg_project_name}_drupal_settings_hash_salt";
  echo "dev" > "secrets/${_arg_project_name}_environment";
  touch "secrets/${_arg_project_name}_varnish_secret";
fi

# Create a .env file for the build script to use.
if [[ $_arg_env_file == "on" ]]; then
  echo "PROJECTNAME=${_arg_project_name}" | tee -a .env;
  echo "PHP8_APACHE_IMAGE_TAG=8.1-apache-bullseye" | tee -a .env;
  echo "PHP8_APACHE_EXTENSIONS_DIRECTORY=/usr/local/lib/php/extensions/no-debug-non-zts-20210902" | tee -a .env;
  echo "WATERDROP_DEV_IMAGE_TAG=${_arg_project_name}:dev" | tee -a .env;
fi

# Since app/src doesn't exist until we run composer, and app/src/config_sync is not part
# of the Drupal scaffold, add it here.
mkdir app/src/config_sync;

# Echo out ending messages.
echo "Waterdrop initialization is finished.";
echo "";
echo "";

echo "There are some manual tasks to finish before you will be finished.";
echo "  * REQUIRED: Edit app/Dockerfile and set the webuser uid and gid to the same value as your local system user.";
echo "  * REQUIRED: CHOWN the _data folder in your private and public docker volumes to the uid and gid of your local system user.";
echo "  * Edit app/src/composer.json and set the project name/licenses/maintainer/etc.";
echo "  * REQUIRED: Add your projects secret information to the secrets/* files.";
echo "  * Rewrite README.md for your project.";
echo "  * Replace LICENSE with whatever license you are using.";
echo "  * If you are not committing dev.run.yml, add it to .gitignore.";
echo "  * REQUIRED: Check if you are missing any PHP extensions in the Dockerfile.";


# ] <-- needed because of Argbash